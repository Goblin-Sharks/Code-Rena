{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lilijiaxin/Desktop/Code-Rena/client/src/components/signup.js\";\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../user_actions/user_actions';\nimport { Form, Input, Button } from 'antd';\nimport axios from 'axios';\n\nfunction RegisterPage(props) {\n  const registerUser = dataToSubmit => {\n    const request = axios.post('/register', dataToSubmit).then(response => response.data);\n    return {\n      payload: request\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validationSchema: Yup.object().shape({\n      username: Yup.string().required('Name is required'),\n      password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        let dataToSubmit = {\n          username: values.username,\n          password: values.password\n        };\n        dispatch(registerUser(dataToSubmit)).then(response => {\n          // response will be sent to the payload\n          if (response.payload.success) {\n            props.history.push('/login');\n          } else {\n            alert(response.payload.err.errmsg);\n          }\n        });\n        setSubmitting(false);\n      }, 500);\n    },\n    children: props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          style: {\n            minWidth: '375px'\n          },\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            required: true,\n            label: \"User Name\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              id: \"name\",\n              placeholder: \"Enter user name\",\n              type: \"text\",\n              value: values.name,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              className: errors.name && touched.name ? 'text-input error' : 'text-input'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), errors.name && touched.name && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-feedback\",\n              children: errors.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            required: true,\n            label: \"Password\",\n            hasFeedback: true,\n            validateStatus: errors.password && touched.password ? 'error' : 'success',\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              id: \"password\",\n              placeholder: \"Enter your password\",\n              type: \"password\",\n              value: values.password,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              className: errors.password && touched.password ? 'text-input error' : 'text-input'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), errors.password && touched.password && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-feedback\",\n              children: errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleSubmit,\n              type: \"primary\",\n              disabled: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RegisterPage;\nexport default RegisterPage; //const dispatch = useDispatch();\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           //   dispatch(registerUser(dataToSubmit)).then((response) => {\n//           //     // response will be sent to the payload\n//           //     if (response.payload.success) {\n//           //       props.history.push('/login');\n//           //     } else {\n//           //       alert(response.payload.err.errmsg);\n//           //     }\n//           //   });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div >\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"sources":["/Users/lilijiaxin/Desktop/Code-Rena/client/src/components/signup.js"],"names":["React","Formik","Yup","useDispatch","registerUser","Form","Input","Button","axios","RegisterPage","props","dataToSubmit","request","post","then","response","data","payload","username","password","object","shape","string","required","min","values","setSubmitting","setTimeout","dispatch","success","history","push","alert","err","errmsg","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","minWidth","name"],"mappings":"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":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../user_actions/user_actions';\nimport { Form, Input, Button } from 'antd';\nimport axios from 'axios';\nfunction RegisterPage(props) {\n  const registerUser = (dataToSubmit) => {\n    const request = axios\n      .post('/register', dataToSubmit)\n      .then((response) => response.data);\n\n    return {\n      payload: request,\n    };\n  };\n  return (\n    <Formik\n      initialValues={{ username: '', password: '' }}\n      validationSchema={Yup.object().shape({\n        username: Yup.string().required('Name is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            username: values.username,\n            password: values.password,\n          };\n          dispatch(registerUser(dataToSubmit)).then((response) => {\n            // response will be sent to the payload\n            if (response.payload.success) {\n              props.history.push('/login');\n            } else {\n              alert(response.payload.err.errmsg);\n            }\n          });\n\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {(props) => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = props;\n        return (\n          <div>\n            <h2>Sign up</h2>\n            <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n              <Form.Item required label=\"User Name\">\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter user name\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.name && touched.name\n                      ? 'text-input error'\n                      : 'text-input'\n                  }\n                />\n                {errors.name && touched.name && (\n                  <div className=\"input-feedback\">{errors.name}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item\n                required\n                label=\"Password\"\n                hasFeedback\n                validateStatus={\n                  errors.password && touched.password ? 'error' : 'success'\n                }\n              >\n                <Input\n                  id=\"password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password\n                      ? 'text-input error'\n                      : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item>\n                <Button\n                  onClick={handleSubmit}\n                  type=\"primary\"\n                  disabled={isSubmitting}\n                >\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n}\nexport default RegisterPage;\n\n//const dispatch = useDispatch();\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           //   dispatch(registerUser(dataToSubmit)).then((response) => {\n//           //     // response will be sent to the payload\n//           //     if (response.payload.success) {\n//           //       props.history.push('/login');\n//           //     } else {\n//           //       alert(response.payload.err.errmsg);\n//           //     }\n//           //   });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div >\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n"]},"metadata":{},"sourceType":"module"}