{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lilijiaxin/Desktop/Code-Rena/client/src/components/signup.js\";\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../user_actions/user_actions';\nimport { Form, Input, Button } from 'antd';\n\nconst RegisterPage = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hallo\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n};\n\n_c = RegisterPage;\nexport default RegisterPage; //const dispatch = useDispatch();\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           //   dispatch(registerUser(dataToSubmit)).then((response) => {\n//           //     // response will be sent to the payload\n//           //     if (response.payload.success) {\n//           //       props.history.push('/login');\n//           //     } else {\n//           //       alert(response.payload.err.errmsg);\n//           //     }\n//           //   });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div >\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"sources":["/Users/lilijiaxin/Desktop/Code-Rena/client/src/components/signup.js"],"names":["React","Formik","Yup","useDispatch","registerUser","Form","Input","Button","RegisterPage","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;KAAMD,Y;AAGN,eAAeA,YAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../user_actions/user_actions';\nimport { Form, Input, Button } from 'antd';\nconst RegisterPage = (props) => {\n  return <div>hallo</div>;\n};\nexport default RegisterPage;\n\n//const dispatch = useDispatch();\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           //   dispatch(registerUser(dataToSubmit)).then((response) => {\n//           //     // response will be sent to the payload\n//           //     if (response.payload.success) {\n//           //       props.history.push('/login');\n//           //     } else {\n//           //       alert(response.payload.err.errmsg);\n//           //     }\n//           //   });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div >\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n"]},"metadata":{},"sourceType":"module"}