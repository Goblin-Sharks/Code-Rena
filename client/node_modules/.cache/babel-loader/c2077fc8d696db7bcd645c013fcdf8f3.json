{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lilijiaxin/Desktop/Code-Rena/client/src/components/signup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst RegisterPage = () => {\n  _s();\n\n  const [username, setName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const getName = e => {\n    setName(e.target.value);\n  };\n\n  const getPassword = e => {\n    setPassword(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const questionForm = {\n      username: username,\n      password: password\n    };\n    axios.post('http://localhost:5000/signup', questionForm);\n    window.location = '/';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"User Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: getName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: password,\n          onChange: getPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          className: \"btn btn-success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterPage, \"8SUicrTMZVqytfh433MqfpJRFeI=\");\n\n_c = RegisterPage;\nexport default RegisterPage; // import React from 'react';\n// import { Formik } from 'formik';\n// import * as Yup from 'yup';\n// import { Form, Input, Button } from 'antd';\n// import axios from 'axios';\n// function RegisterPage(props) {\n//   const registerUser = (dataToSubmit) => {\n//     const request = axios\n//       .post('/signup', dataToSubmit)\n//       .then((response) => response.data);\n//     console.log(request);\n//     return {\n//       payload: request,\n//     };\n//   };\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           registerUser(dataToSubmit).then((response) => {\n//             // response will be sent to the payload\n//             if (response.payload.success) {\n//               props.history.push('/');\n//             } else {\n//               alert(response.payload.message.err);\n//             }\n//           });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div>\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n// }\n// export default RegisterPage;\n//const dispatch = useDispatch();\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           //   dispatch(registerUser(dataToSubmit)).then((response) => {\n//           //     // response will be sent to the payload\n//           //     if (response.payload.success) {\n//           //       props.history.push('/login');\n//           //     } else {\n//           //       alert(response.payload.err.errmsg);\n//           //     }\n//           //   });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div >\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"sources":["/Users/lilijiaxin/Desktop/Code-Rena/client/src/components/signup.js"],"names":["React","useState","useEffect","axios","RegisterPage","username","setName","password","setPassword","getName","e","target","value","getPassword","onSubmit","preventDefault","questionForm","post","window","location"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMQ,OAAO,GAAIC,CAAD,IAAO;AACrBJ,IAAAA,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GAFD;;AAGA,QAAMC,WAAW,GAAIH,CAAD,IAAO;AACzBF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAFD;;AAIA,QAAME,QAAQ,GAAIJ,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAMC,YAAY,GAAG;AACnBX,MAAAA,QAAQ,EAAEA,QADS;AAEnBE,MAAAA,QAAQ,EAAEA;AAFS,KAArB;AAIAJ,IAAAA,KAAK,CAACc,IAAN,CAAW,8BAAX,EAA2CD,YAA3C;AACAE,IAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;AACD,GARD;;AASA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEL,QAAhB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,EAAET,QAA1B;AAAoC,UAAA,QAAQ,EAAEI;AAA9C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,EAAEF,QAA1B;AAAoC,UAAA,QAAQ,EAAEM;AAA9C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAUE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC,QAA3B;AAAoC,UAAA,SAAS,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAvCD;;GAAMT,Y;;KAAAA,Y;AAwCN,eAAeA,YAAfsourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst RegisterPage = () => {\n  const [username, setName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const getName = (e) => {\n    setName(e.target.value);\n  };\n  const getPassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const questionForm = {\n      username: username,\n      password: password,\n    };\n    axios.post('http://localhost:5000/signup', questionForm);\n    window.location = '/';\n  };\n  return (\n    <div>\n      <h3>Sign Up</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label>User Name:</label>\n          <input type=\"text\" value={username} onChange={getName} />\n        </div>\n        <div className=\"form-group\">\n          <label>Password:</label>\n          <input type=\"text\" value={password} onChange={getPassword} />\n        </div>\n\n        <div className=\"mx-auto text-center\">\n          <input type=\"submit\" value=\"Submit\" className=\"btn btn-success\" />\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default RegisterPage;\n\n// import React from 'react';\n// import { Formik } from 'formik';\n// import * as Yup from 'yup';\n\n// import { Form, Input, Button } from 'antd';\n// import axios from 'axios';\n// function RegisterPage(props) {\n//   const registerUser = (dataToSubmit) => {\n//     const request = axios\n//       .post('/signup', dataToSubmit)\n//       .then((response) => response.data);\n//     console.log(request);\n//     return {\n//       payload: request,\n//     };\n//   };\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           registerUser(dataToSubmit).then((response) => {\n//             // response will be sent to the payload\n//             if (response.payload.success) {\n//               props.history.push('/');\n//             } else {\n//               alert(response.payload.message.err);\n//             }\n//           });\n\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div>\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n// }\n// export default RegisterPage;\n\n//const dispatch = useDispatch();\n//   return (\n//     <Formik\n//       initialValues={{ username: '', password: '' }}\n//       validationSchema={Yup.object().shape({\n//         username: Yup.string().required('Name is required'),\n//         password: Yup.string()\n//           .min(6, 'Password must be at least 6 characters')\n//           .required('Password is required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           let dataToSubmit = {\n//             username: values.username,\n//             password: values.password,\n//           };\n//           //   dispatch(registerUser(dataToSubmit)).then((response) => {\n//           //     // response will be sent to the payload\n//           //     if (response.payload.success) {\n//           //       props.history.push('/login');\n//           //     } else {\n//           //       alert(response.payload.err.errmsg);\n//           //     }\n//           //   });\n//           setSubmitting(false);\n//         }, 500);\n//       }}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           touched,\n//           errors,\n//           isSubmitting,\n//           handleChange,\n//           handleBlur,\n//           handleSubmit,\n//         } = props;\n//         return (\n//           <div >\n//             <h2>Sign up</h2>\n//             <Form style={{ minWidth: '375px' }} onSubmit={handleSubmit}>\n//               <Form.Item required label=\"User Name\">\n//                 <Input\n//                   id=\"name\"\n//                   placeholder=\"Enter user name\"\n//                   type=\"text\"\n//                   value={values.name}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.name && touched.name\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.name && touched.name && (\n//                   <div className=\"input-feedback\">{errors.name}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item\n//                 required\n//                 label=\"Password\"\n//                 hasFeedback\n//                 validateStatus={\n//                   errors.password && touched.password ? 'error' : 'success'\n//                 }\n//               >\n//                 <Input\n//                   id=\"password\"\n//                   placeholder=\"Enter your password\"\n//                   type=\"password\"\n//                   value={values.password}\n//                   onChange={handleChange}\n//                   onBlur={handleBlur}\n//                   className={\n//                     errors.password && touched.password\n//                       ? 'text-input error'\n//                       : 'text-input'\n//                   }\n//                 />\n//                 {errors.password && touched.password && (\n//                   <div className=\"input-feedback\">{errors.password}</div>\n//                 )}\n//               </Form.Item>\n\n//               <Form.Item>\n//                 <Button\n//                   onClick={handleSubmit}\n//                   type=\"primary\"\n//                   disabled={isSubmitting}\n//                 >\n//                   Submit\n//                 </Button>\n//               </Form.Item>\n//             </Form>\n//           </div>\n//         );\n//       }}\n//     </Formik>\n//   );\n"]},"metadata":{},"sourceType":"module"}